7.
Lớp Cart bây giờ cần có khả năng tương tác với các đối tượng DVD, CD và Book. Vì các lớp DVD, CD và Book đều kế thừa từ lớp Media, nên thay vì làm việc trực tiếp với từng lớp con, lớp cart chỉ cần giao tiếp với lớp Media là có thể hoạt động được với tất cả.
10.
Để tránh trùng lặp các phần tử media trong giỏ hàng hoặc các track trong một đĩa CD, chúng ta có thể ghi đè lại phương thức equals() mặc định kế thừa từ lớp Object. Việc này cho phép so sánh bản chất thay vì so sánh vị trí ô nhớ của các đối tượng, qua đó ngăn chặn thêm các phần tử bị trùng lắp vào danh sách.
11.
Lớp Media là lớp cơ sở được kế thừa bởi các lớp cụ thể hơn là CompactDisc, DigitalVideoDisc và Book. Khi khởi tạo các đối tượng cd, dvd, book thuộc lớp con rồi gán chúng cho biến kiểu Media, ta áp dụng kỹ thuật gọi là upcasting.
Việc thêm chúng vào danh sách media và duyệt danh sách để in ra thông tin mỗi phần tử bằng phương thức toString() là ví dụ điển hình cho tính đa hình động. Mỗi lớp con có thể cài đặt riêng toString() nên kết quả sẽ khác nhau dựa theo loại đối tượng, mà không cần quan tâm đến kiểu cụ thể của từng phần tử.
12.
- What class should implement the Comparable interface?: Lớp đại diện cho các mục media, chẳng hạn như lớp Media hoặc các lớp con cụ thể của nó (ví dụ: DigitalVideoDisc, Book)
- In those classes, how should you implement the compareTo()method be to reflect the ordering that we want?: Cách triển khai phương thức compareTo() phụ thuộc vào yêu cầu về thứ tự tự nhiên
- Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this Comparable interface approach? Không vì compareTo() chỉ cho phép định nghĩa một quy tắc sắp xếp tự nhiên duy nhất.
- Suppose the DVDs has a different ordering rule from the other media types, that is by title, then decreasing length, then cost. How would you modify your code to allow this? Trong trường hợp này, có thể triển khai một trình so sánh (Comparator) riêng cho lớp DVD:
- Code:
public class DVDComparator implements Comparator<DigitalVideoDisc> {
    @Override
    public int compare(DigitalVideoDisc dvd1, DigitalVideoDisc dvd2) {
        if (dvd1.getTitle() != null && dvd2.getTitle() != null) {
            int titleComparison = dvd1.getTitle().compareTo(dvd2.getTitle());
            if (titleComparison != 0) {
                return titleComparison;
            }
        } else if (dvd1.getTitle() == null && dvd2.getTitle() != null) {
            return 1;
        } else if (dvd1.getTitle() != null && dvd2.getTitle() == null) {
            return -1;
        }
        int lengthComparison = Integer.compare(dvd2.getLength(), dvd1.getLength());
        if (lengthComparison != 0) {
            return lengthComparison;
        }
        return Double.compare(dvd1.getCost(), dvd2.getCost());
    }
}

